// Дайте ответ, что будет в результате выполнения данных ниже примеров. С объяснением, почему это так.

//"кот" > "код";
// true , т.к. "т" имеет большее значение,чем "д".

// "2" + 2 * "2";
// "24", сначало делаем умножение и, затем присоединяем к строке.

// undefined == null
// true, это специальное правило языка, равны между собой, но не равны любому другому значению

// undefined != null;
// false, т.к. boolean значение.

// null == 0
// false, null может быть равно null или undefined

// 2 > "3";
// false, при сравнении значений разных типов приводит каждое из них к числу.

// null - false + true
// 1, т.к. null при числовом выражении 0, false-0, true-1, итог: 0-0+1=1

// 1 / "I"
// NaN,  число на строчное значение не делится.

// "2" * "3"
// 6,  т.к. математическое образование

//4 + 5 + "O";
// "9O"

// "I" + 4 + 5
// "I45", оператор + выполняется слева направо, поэтому сначала выполнится выражение, оператор вызвал строковое преобразование

// "4" - 2
// 2, математическая операция

// "4" - "4x"
// NaN,т.к. 4х не смог преобразовать в число.

// "23" == 23
// true, в данном случае эти значения равны

// null == false
// false, т.к. null равен только undefined, либо самому себе.

// " -4 "/ 0 + 1
// -4,, т.к. 0+1=1. -4/1=-4

// null + 1
// 1, если null перевести в числовое значение будет 0.

//undefined + null
// NaN, при численном преобразовании undefined это NaN, null -0

// 1 === "1"
// false, т.к. при строгом равенстве строка не может быть равна числовому значению.

// "2" > 10
// false, при сравнении значений разных типов приводит каждое из них к числу.

// NaN == undefined
// false.
